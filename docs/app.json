[{"name": "app.py", "content": "from pathlib import Path\nimport pandas as pd\nimport geopandas as gpd\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom geopy.distance import geodesic\nimport folium\n\n#------------------------------#\n# Airfield coordinates\n#------------------------------#\n# Dictionary containing airport codes and their coordinates\nairfield_coords = {\n    \"HNL\": (21.3187, -157.9225),  # Honolulu International Airport\n    \"OGG\": (20.8986, -156.4305),  # Kahului Airport\n    \"LIH\": (21.9750, -159.3380),  # Lihue Airport\n    \"KOA\": (19.7388, -156.0456),  # Kona International Airport\n    \"ITO\": (19.7203, -155.0485)   # Hilo International Airport\n}\n\n# Extracting airport codes from the dictionary\nairports = list(airfield_coords.keys())\n\n# Dictionary to map original column headers to more readable alternatives\ncolumn_rename_dict = {\n    'validdate': 'DateTime',\n    't_2m:F': 'Temp. (F)',\n    'wind_speed_10m:kn': 'Wind Speed (kn)',\n    'nearest_airport': 'Airport',\n    'Date_Format': 'Day'\n}\n\n#------------------------------#\n# Helper functions\n#------------------------------#\n\n# Function to find the nearest airport based on latitude and longitude\ndef find_nearest_airport(lat, lon):\n    min_distance = float('inf')\n    nearest_airport = None\n    for airport, coords in airfield_coords.items():\n        distance = geodesic((lat, lon), coords).miles\n        if distance < min_distance:\n            min_distance = distance\n            nearest_airport = airport\n    return nearest_airport\n\n#------------------------------#\n# Import data from CSV\n#------------------------------#\ninfile = Path(__file__).parent / \"custom_app_weather_data.csv\"\ndf = pd.read_csv(infile, sep=';')\n\n# Convert the 'validdate' column to datetime type \ndf['datetime'] = pd.to_datetime(df['validdate'], format='%Y-%m-%dT%H:%M:%SZ') \n\n\n# Extract the date part \ndf['date'] = df['datetime'].dt.date\ndf['Day'] = df['datetime'].dt.strftime('%a-%b-%d')\n\ndf['Airport'] = df.apply(lambda row: find_nearest_airport(row['lat'], row['lon']), axis=1)\n\n# Rename columns using the dictionary\ndf.rename(columns=column_rename_dict, inplace=True)\n\n# Create Dataframe filters\n#------------------------------#\n\n# Reactive function to calculate filtered data and create GeoDataFrames\n@reactive.calc()\ndef reactive_calc_combined():\n    # Get the filtered data based on user inputs\n    df_filtered = filtered_data()\n    \n    # Get the wind speed threshold from user input\n    threshold = input.wind_threshold()\n    \n    # Filter data above the wind speed threshold\n    df_above_threshold = df_filtered[df_filtered['Wind Speed (kn)'] >= threshold]\n    \n    # Filter data below the wind speed threshold\n    df_below_threshold = df_filtered[df_filtered['Wind Speed (kn)'] < threshold]\n    \n    # Create a GeoDataFrame for the filtered data\n    gdf_filtered = gpd.GeoDataFrame(\n        folium_filter(), \n        geometry=gpd.points_from_xy(folium_filter().lon, folium_filter().lat), crs=\"EPSG:4326\"\n    )\n    \n    # Return the filtered DataFrames and GeoDataFrame\n    return df_above_threshold, df_below_threshold, gdf_filtered  \n\n# Create a display DataFrame with selected columns\ndf_display = df[['Day', 'Airport', 'Wind Speed (kn)', 'Temp. (F)']]\n\n#------------------------------#\n# Create the map\n#------------------------------#\n# Function to create the Folium map \ndef create_map(): \n    # Calculate the bounding box for the map based on the latitude and longitude of the data points\n    bounds = [[df['lat'].min() - 1, df['lon'].min() - 1], [df['lat'].max() + 1, df['lon'].max() + 1]]\n    \n    # Initialize the Folium map centered at Honolulu International Airport with a starting zoom level of 15\n    m = folium.Map(location=airfield_coords[\"HNL\"], zoom_control=False, scrollWheelZoom=False)\n    \n    # Add markers with conditional colors to the map\n    for _, row in folium_filter().iterrows():\n        # Get the wind speed threshold from user input\n        threshold = input.wind_threshold()\n        \n        # Determine the marker color based on the wind speed and threshold\n        marker_color = get_marker_color(row['Wind Speed (kn)'], threshold)\n        \n        # Add a marker to the map with the determined color\n        folium.Marker(\n            location=[row['lat'], row['lon']],\n            popup=folium.Popup(row['Airport'], max_width=300),\n            icon=folium.Icon(color=marker_color)\n        ).add_to(m)\n    \n    # Fit the map to the calculated bounds\n    m.fit_bounds(bounds)\n    \n    # Return the created map\n    return m\n\n# Function to determine the marker color based on wind speed and threshold\ndef get_marker_color(wind_speed, threshold):\n    # If the wind speed is below the threshold, return 'green'\n    if wind_speed < threshold:\n        return 'green'\n    # Otherwise, return 'red'\n    else:\n        return 'red'\n\n#------------------------------#\n# User interface\n#------------------------------#\nui.page_opts(title=\"Windspeeds Over Hawaiian Airfields\", fillable=False) \n\n# Sidebar\n#------------------------------#\nwith ui.sidebar(width=450):    \n    # Dropdown to select a date from the unique dates in the DataFrame\n    ui.input_select(\"date\", \"Choose Date\", choices=df['Day'].unique().tolist())\n    \n    # Slider to set the wind speed threshold\n    ui.input_slider('wind_threshold', 'Wind Speed Threshold', min=1, max=35, value=5)\n    \n    # Checkbox group to select airfields from the unique nearest airports in the DataFrame\n    ui.input_checkbox_group(\n        \"airfields\",\n        \"Choose Airfields:\",\n        choices=df['Airport'].unique().tolist(), selected=df['Airport'].unique().tolist()\n    )\n\n    # Horizontal rule for visual separation\n    ui.hr()\n    \n    # Render the Folium map\n    @render.ui\n    def folio():\n        return create_map()\n\n# Main panel\n#------------------------------#\n\nwith ui.layout_columns():\n    with ui.card():\n        # Card header indicating high wind caution\n        ui.card_header(\"CAUTION: High Winds!\")\n        \n        @render.data_frame\n        def table_above():\n            # Fetch data from the reactive calc function\n            df_above_threshold, df_below_threshold, gdf_filtered = reactive_calc_combined()\n            # Return a DataGrid for data above the wind threshold\n            return render.DataGrid(df_above_threshold)\n        \n    with ui.card(full_screen=True):\n        @render.ui\n        def explorer():\n            # Fetch data from the reactive calc function\n            df_above_threshold, df_below_threshold, gdf_filtered = reactive_calc_combined()\n            # Return an interactive map for the filtered GeoDataFrame\n            return gdf_filtered.explore(zoom_start=6, marker_kwds={\"radius\": 7}, tooltip=['Airport', 'lat', 'lon', 'Wind Speed (kn)', \"Temp. (F)\"], tooltip_sticky=True, highlight=True, min_zoom=4, max_zoom=12)\n                                       \nwith ui.card():\n    # Card header indicating airfields below wind threshold\n    ui.card_header('Airfields Below Wind Threshold: Good to fly!')\n    \n    @render.data_frame\n    def table_below():\n        # Fetch data from the reactive calc function\n        df_above_threshold, df_below_threshold, gdf_filtered = reactive_calc_combined()\n        # Return a DataGrid for data below the wind threshold\n        return render.DataGrid(df_below_threshold)\n          \n           \n@reactive.calc\ndef filtered_data():\n    # Filter the display DataFrame based on the selected date and nearest airports\n    FilterMatch = df_display[\"Day\"].isin([input.date()]) & df_display['Airport'].isin(input.airfields())\n    # Return the filtered display DataFrame\n    return df_display[FilterMatch] \n\n@reactive.calc\ndef folium_filter():\n    # Filter the map DataFrame based on the selected date and nearest airports\n    FolioMatch = df[\"Day\"].isin([input.date()]) & df['Airport'].isin(input.airfields())\n    # Return the filtered map DataFrame\n    return df[FolioMatch] \n\nprint(\"App loaded\")", "type": "text"}, {"name": "custom_app_weather_data.csv", "content": "lat;lon;validdate;t_2m:F;wind_speed_10m:kn\n19.718831;-155.047554;2024-11-26T08:15:00Z;71.2;3.6\n19.718831;-155.047554;2024-11-27T08:15:00Z;71.1;5.3\n19.743906;-156.042296;2024-11-26T08:15:00Z;73.9;3.0\n19.743906;-156.042296;2024-11-27T08:15:00Z;72.5;6.1\n21.321157;-157.918442;2024-11-26T08:15:00Z;73.3;4.2\n21.321157;-157.918442;2024-11-27T08:15:00Z;74.1;5.0\n20.895698;-156.434048;2024-11-26T08:15:00Z;71.5;2.6\n20.895698;-156.434048;2024-11-27T08:15:00Z;72.9;7.1\n21.972066;-159.336715;2024-11-26T08:15:00Z;71.7;7.2\n21.972066;-159.336715;2024-11-27T08:15:00Z;72.4;6.7\n", "type": "text"}]